#code generated by chatGPT4
#calculates poloidal flux for a coilset with NSTX-U like parameters
import numpy as np
import matplotlib.pyplot as plt

# Define a function to calculate the poloidal magnetic field using the Biot-Savart law
def biot_savart_law_poloidal(current, coil_pos, r_coil, r_probe):
    mu_0 = 4 * np.pi * 1e-7  # Vacuum permeability (T*m/A)
    r_diff = r_probe - coil_pos
    r_diff_norm = np.linalg.norm(r_diff)
    cross_product = np.cross(r_diff, r_coil - coil_pos)
    b_field = (mu_0 * current * cross_product) / (4 * np.pi * r_diff_norm**3)
    return b_field[1]  # Return the poloidal component (y-axis)

# NSTX-U-like coil parameters
coil_currents = np.array([10000, 10000, 10000])  # Currents in each coil (A)
coil_positions = np.array([[0, 0, -0.85], [0, 0, 0.85], [0, 0, 0]])  # Positions of coils (m)
r_coil = np.array([[0, 0.68, -0.85], [0, 0.68, 0.85], [0, 0.68, 0]])  # Coil positions with radii (m)

# Define grid parameters
x_range = np.linspace(-1.5, 1.5, 20)
z_range = np.linspace(-1.5, 1.5, 20)

# Calculate poloidal magnetic field on the grid
b_poloidal = np.zeros((len(x_range), len(z_range)))
for i, x in enumerate(x_range):
    for j, z in enumerate(z_range):
        r_probe = np.array([x, 0, z])
        b_poloidal_ij = 0
        for current, coil_pos, r_coil_pos in zip(coil_currents, coil_positions, r_coil):
            b_poloidal_ij += biot_savart_law_poloidal(current, coil_pos, r_coil_pos, r_probe)
        b_poloidal[i, j] = b_poloidal_ij

# Calculate poloidal flux
poloidal_flux = np.sum(b_poloidal) * (x_range[1] - x_range[0]) * (z_range[1] - z_range[0])
print(f'Poloidal flux: {poloidal_flux} Wb')

# Plot the poloidal flux
X, Z = np.meshgrid(x_range, z_range)
plt.figure(figsize=(8, 8))
plt.pcolor(X, Z, b_poloidal.T, cmap='viridis', shading='auto')
plt.xlabel('X (m)')
plt.ylabel('Z (m)')
plt.title('Poloidal Flux')
plt.colorbar(label='Magnetic field (T)')
plt.axis('equal')
plt.show()
